enum NeoRegExps {
  // TODO: Order enums alphabetically to prevent possible conflicts!
  allCharacterExceptNumber("\\D+"),
  allowAlphabeticAndSpace("[a-zA-Z\\s]+"),
  allowAlphabeticEnglishOnly("^[a-zA-Z]+"),
  allowAlphabeticTurkishAndSpace("[a-zA-ZçÇğĞıİöÖşŞüÜ\\s]+"),
  allowAlphabeticTurkishNumbers("[a-zA-ZçÇğĞıİöÖşŞüÜ0-9]+"),
  allowAlphabeticTurkishNumbersAndDash("[-a-zA-ZçÇğĞıİöÖşŞüÜ0-9]+"),
  allowAlphabeticTurkishNumbersAndSpace("[a-zA-ZçÇğĞıİöÖşŞüÜ0-9\\s]+"),
  allowInternationalText("[\\p{L}\\p{M}\\s\\d\\-.'’@#\$%&*()_+=\\[\\]{}|\\\\/:;\"'`<>?,!~€£¥₺]"),
  allowNumberAndDecimalSeparator("[0-9,.]*"),
  allowOnlyBurganIban("^.{3}0012 5"),
  alphanumeric("[a-zA-Z0-9]+"),
  alphanumericAndSpecialCharacters("[a-zA-Z0-9çÇğĞıİöÖşŞüÜ\\s\\-.'@#\$%&*()_+=\\[\\]{}|\\\\/:;\"'`<>?,!~€£¥₺\"'']+"),
  digitOnly("[0-9]*"),
  email("^\$|^([a-zA-Z0-9._-]+)@((?!-)(?=[a-zA-Z0-9-]*[a-zA-Z])[a-zA-Z0-9-]+(?<!-)(\\.[a-zA-Z]+)+)\$"),
  exactlySixDigits("^\\d{6}\$"),
  findPlaceholdersInCurlyBraces(r"\{([^}]+)\}"),
  formattedNoCountryCodePhoneNumber("^5\\d{2} \\d{3} \\d{2} \\d{2}\$"),
  limitedSpecialCharacters("[a-zA-Z0-9çÇğĞıİöÖşŞüÜ\\s():\\-@.,_]+"),
  minFourCharacter("^.{4,}\$"),
  minEightCharacter(r"^.{8,}$"),
  minFiveCharacter(r"^.{5,}$"),
  minSixCharacter("^.{6,}\$"),
  minSixCharacterAlphabetic(r"^[A-Za-z]{6}.*$"),
  minTenCharacter("^.{10,}\$"),
  minThreeCharacter("^.{3,}\$"),
  minTwentyCharacter(r"^.{20,}$"),
  minTwoCharacter(r"^.{2,}$"),
  noDecimal("[^,.]"),
  noFirstSpace("^(?! +\$).*"),
  noLeadingOrTrailingSpaces("^(?! ).*(?<! )\$"),
  noOneOrTwoCharacter("^(?!.{1,2}\$.*)"),
  noSpace("^[^\\s]+\$"),
  notEmpty("^(?!\\s*\$).+"),
  numeric(r"^\d*$"),
  onlyNumeric("[0-9]+"),
  phoneNumber("^(\\+?\\d{1,3})?[-.\\s]?(\\(?\\d{1,4}\\)?)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\$"),
  securePayRefNo(r'^\d{4}-(001|002)-[a-zA-Z0-9]{12,20}$'),
  startsWithFive("^5"),
  nonDollarPrefix("^(?!\$)"),
  ;

  const NeoRegExps(this.regex);

  final String regex;

  static const Map<String, NeoRegExps> _jsonValues = {
    // TODO: Order enums alphabetically to prevent possible conflicts!
    'NeoRegExps.allCharacterExceptNumber': NeoRegExps.allCharacterExceptNumber,
    'NeoRegExps.allowAlphabeticAndSpace': NeoRegExps.allowAlphabeticAndSpace,
    'NeoRegExps.allowAlphabeticEnglishOnly': NeoRegExps.allowAlphabeticEnglishOnly,
    'NeoRegExps.allowAlphabeticTurkishAndSpace': NeoRegExps.allowAlphabeticTurkishAndSpace,
    'NeoRegExps.allowAlphabeticTurkishNumbers': NeoRegExps.allowAlphabeticTurkishNumbers,
    'NeoRegExps.allowAlphabeticTurkishNumbersAndDash': NeoRegExps.allowAlphabeticTurkishNumbersAndDash,
    'NeoRegExps.allowAlphabeticTurkishNumbersAndSpace': NeoRegExps.allowAlphabeticTurkishNumbersAndSpace,
    'NeoRegExps.allowInternationalText': NeoRegExps.allowInternationalText,
    'NeoRegExps.allowNumberAndDecimalSeparator': NeoRegExps.allowNumberAndDecimalSeparator,
    'NeoRegExps.allowOnlyBurganIban': NeoRegExps.allowOnlyBurganIban,
    'NeoRegExps.alphanumeric': NeoRegExps.alphanumeric,
    'NeoRegExps.alphanumericAndSpecialCharacters': NeoRegExps.alphanumericAndSpecialCharacters,
    'NeoRegExps.digitOnly': NeoRegExps.digitOnly,
    'NeoRegExps.email': NeoRegExps.email,
    'NeoRegExps.exactlySixDigits': NeoRegExps.exactlySixDigits,
    'NeoRegExps.findPlaceholdersInCurlyBraces': NeoRegExps.findPlaceholdersInCurlyBraces,
    'NeoRegExps.formattedNoCountryCodePhoneNumber': NeoRegExps.formattedNoCountryCodePhoneNumber,
    'NeoRegExps.limitedSpecialCharacters': NeoRegExps.limitedSpecialCharacters,
    'NeoRegExps.minEightCharacter': NeoRegExps.minEightCharacter,
    'NeoRegExps.minFiveCharacter': NeoRegExps.minFiveCharacter,
    'NeoRegExps.minFourCharacter': NeoRegExps.minFourCharacter,
    'NeoRegExps.minSixCharacter': NeoRegExps.minSixCharacter,
    'NeoRegExps.minSixCharacterAlphabetic': NeoRegExps.minSixCharacterAlphabetic,
    'NeoRegExps.minTenCharacter': NeoRegExps.minTenCharacter,
    'NeoRegExps.minThreeCharacter': NeoRegExps.minThreeCharacter,
    'NeoRegExps.minTwentyCharacter': NeoRegExps.minTwentyCharacter,
    'NeoRegExps.minTwoCharacter': NeoRegExps.minTwoCharacter,
    'NeoRegExps.noDecimal': NeoRegExps.noDecimal,
    'NeoRegExps.noFirstSpace': NeoRegExps.noFirstSpace,
    'NeoRegExps.noLeadingOrTrailingSpaces': NeoRegExps.noLeadingOrTrailingSpaces,
    'NeoRegExps.noOneOrTwoCharacter': NeoRegExps.noOneOrTwoCharacter,
    'NeoRegExps.noSpace': NeoRegExps.noSpace,
    'NeoRegExps.notEmpty': NeoRegExps.notEmpty,
    'NeoRegExps.numeric': NeoRegExps.numeric,
    'NeoRegExps.onlyNumeric': NeoRegExps.onlyNumeric,
    'NeoRegExps.phoneNumber': NeoRegExps.phoneNumber,
    'NeoRegExps.securePayRefNo': NeoRegExps.securePayRefNo,
    'NeoRegExps.nonDollarPrefix': NeoRegExps.nonDollarPrefix,
  };

  static NeoRegExps? fromJson(String json) {
    return _jsonValues[json];
  }
}
